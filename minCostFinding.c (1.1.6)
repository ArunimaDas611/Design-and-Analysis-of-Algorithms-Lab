#include <stdio.h>

#include <stdlib.h>

#include <limits.h>

int parent[100];
int find(int i) {
  if (parent[i] == i) {
    return i;
  }
  return parent[i] = find(parent[i]);
}
void union1(int i, int j) {
  int a = find(i);
  int b = find(j);
  parent[a] = b;
}
void kruskalMST(int ** cost, int V) {
    int ne = 0, a, b, i, j, min, mincost = 0;
    for (i = 0; i < V; i++) {
      parent[i] = i;
    }
    while (ne < (V - 1)) {
      min = 9999, a = -1, b = -1;
      for (i = 0; i < V; i++) {
        for (j = 0; j < V; j++) {
          if (cost[i][j] < min &&
            find(i) != find(j)) {
            min = cost[i][j];
            a = i;
            b = j;
          }
        }
      }
      if (a != -1 && b != -1) {
        union1(a, b);
        printf("Edge %d:(%d, %d)
          cost: % d\ n ", ne, a, b, min);
          mincost += min; ne++; cost[a][b] = cost[b][a] = 9999;
        }
    }
    printf("Minimum cost= %d\n", mincost);
}
int main() {
  int V;
  printf("No of vertices: ");
  scanf("%d", & V);
  int ** cost = (int ** ) malloc(V *
    sizeof(int * ));
  for (int i = 0; i < V; i++)
    cost[i] = (int * ) malloc(V *
      sizeof(int));
  printf("Adjacency matrix:\n");
  for (int i = 0; i < V; i++)
    for (int j = 0; j < V; j++)
      scanf("%d", & cost[i][j]);
  kruskalMST(cost, V);
  for (int i = 0; i < V; i++)
    free(cost[i]);
  free(cost);
  return 0;
}
