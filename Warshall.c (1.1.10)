#include <stdio.h>
#define INF 99999
#define MAX_N 20 // Maximum value for N

void floydWarshall(int N, int G[MAX_N]
    [MAX_N]) {
    int dist[MAX_N][MAX_N], i, j, k;
    for (i = 1; i <= N; i++) {
      for (j = 1; j <= N; j++) {
        if (i == j) {
          dist[i][j] = 0;
        } else {
          if (G[i][j] == 0) {
            dist[i][j] = INF;
          } else {
            dist[i][j] = G[i][j];
          }
        }
      }
    }
    for (k = 1; k <= N; k++) {
      for (i = 1; i <= N; i++) {
        for (j = 1; j <= N; j++) {
          if ((dist[i][k] + dist[k]
              [j]) < dist[i][j]) {
            dist[i][j] = dist[i][k] +
              dist[k][j];
          }
        }
      }
    }
    printf("The following matrix shows the shortest distances between all pairs of the vertices.\n ");
    for (i = 1; i <= N; i++) {
      for (j = 1; j <= N; j++) {
        if (dist[i][j] == INF) {
          printf("%5s", "INF");
        } 
        else {
          printf("%5d", dist[i][j]);
        }
      }
      printf("\n");
  }
}
void main() {
    int graph[MAX_N][MAX_N], V, E, s, d, w,
      i, j;
    printf("Enter the number of vertices : ");
    scanf("%d", & V); printf("Enter the number of edges : "); scanf("%d", & E);
      for (i = 1; i <= V; i++) {
        for (j = 1; j <= V; j++) {
          graph[i][j] = 0;
        }
      }
      for (i = 1; i <= E; i++) {
        printf("Enter source : ");
        scanf("%d", & s);
        printf("Enter destination : ");
        scanf("%d", & d);
        printf("Enter weight : ");
        scanf("%d", & w);
        if (s > V || d > V || s <= 0 || d <= 0) {
          printf("Invalid vertex. Try again\ n ");
          i--;
          continue;
        }
        else {
          graph[s][d] = w;
        }
      }
      floydWarshall(V, graph);
}
